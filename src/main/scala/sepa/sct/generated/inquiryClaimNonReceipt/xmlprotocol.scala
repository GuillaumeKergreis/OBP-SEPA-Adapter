// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.inquiryClaimNonReceipt

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Foo](obj, "foo", sepa.sct.generated.inquiryClaimNonReceipt.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:camt.027.001.06",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:camt.027.001.06",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Case4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Case4able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Case4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Case4] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Case4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CashAccount24ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CashAccount24Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_DateAndPlaceOfBirth1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_DateAndPlaceOfBirth1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Documentable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Document] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party34ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party34ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_Purpose2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_Purpose2ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_SettlementInstruction4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_SettlementInstruction4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("ActiveOrHistoricCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Case4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.Case4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Case4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Case4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Case4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Case4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Case4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Case4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Case4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Case4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Case4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Case4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Case4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CaseAssignment4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CashAccount24_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CashAccount24")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CashAccount24_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("ClaimNonReceiptV06_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("ClaimNonReceiptV06")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Case")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Undrlyg")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "InstrForAssgne")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgnmt"), __scope, false),
        __obj.Case map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Case"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable](__obj.Undrlyg, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Undrlyg"), __scope, false),
        __obj.InstrForAssgne map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("InstrForAssgne"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("ClaimNonReceiptV06_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Case")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Undrlyg")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "InstrForAssgne")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Assgnmt"), __scope, false),
        __obj.Case map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Case"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable](__obj.Undrlyg, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Undrlyg"), __scope, false),
        __obj.InstrForAssgne map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("InstrForAssgne"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceType1Choice](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_DateAndPlaceOfBirth1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Document => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "ClmNonRct")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Document(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able](__obj.ClmNonRct, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("ClmNonRct"), __scope, false))
  }

  def buildSepasctgeneratedinquiryClaimNonReceipt_DocumentType3CodeFormat = new DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DISP")) => sepa.sct.generated.inquiryClaimNonReceipt.DISP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FXDR")) => sepa.sct.generated.inquiryClaimNonReceipt.FXDR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PUOR")) => sepa.sct.generated.inquiryClaimNonReceipt.PUOR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RADM")) => sepa.sct.generated.inquiryClaimNonReceipt.RADM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RPIN")) => sepa.sct.generated.inquiryClaimNonReceipt.RPIN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.inquiryClaimNonReceipt.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "ClmNonRct")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ClaimNonReceiptV06able](__obj.ClmNonRct, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("ClmNonRct"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "BICFI")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("BICFI"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "BICFI")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("BICFI"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("InstructionForAssignee1_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("InstructionForAssignee1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "InstrInf")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Cd map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cd"), __scope, false) } getOrElse {Nil},
        __obj.InstrInf map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("InstrInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("InstructionForAssignee1_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "InstrInf")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.InstructionForAssignee1_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Cd map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cd"), __scope, false) } getOrElse {Nil},
        __obj.InstrInf map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("InstrInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrganisationIdentification8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("OrganisationIdentification8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "AnyBIC")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AnyBIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("AnyBIC"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("OrganisationIdentification8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "AnyBIC")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AnyBIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("AnyBIC"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Purp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Purp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Purp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Purp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Party34Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party34Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party34choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party34ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party34Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OrganisationIdentification8able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party34choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party34ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_4")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party35Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PartyIdentification125")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PaymentTypeInformation25_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation25")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation25_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PersonIdentification13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PersonIdentification13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PersonIdentification13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.DateAndPlaceOfBirth1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_Purpose2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("Purpose2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.Purpose2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.purpose2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("RemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("RemittanceInformation15")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("RemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_SettlementInstruction4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("SettlementInstruction4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.SettlementInstruction4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedinquiryClaimNonReceipt_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedinquiryClaimNonReceipt_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.inquiryClaimNonReceipt.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("COVE")) => sepa.sct.generated.inquiryClaimNonReceipt.COVE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.inquiryClaimNonReceipt.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.inquiryClaimNonReceipt.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("StructuredRemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation15")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UnderlyingGroupInformation1_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingGroupInformation1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingGroupInformation1_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UnderlyingPaymentTransaction3_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingPaymentTransaction3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlTxId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlIntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlIntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable](__obj.OrgnlIntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlIntrBkSttlmAmt"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.OrgnlIntrBkSttlmDt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlIntrBkSttlmDt"), __scope, false),
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingPaymentTransaction3_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlTxId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlIntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlIntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingGroupInformation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.ActiveOrHistoricCurrencyAndAmountable](__obj.OrgnlIntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlIntrBkSttlmAmt"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.OrgnlIntrBkSttlmDt, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlIntrBkSttlmDt"), __scope, false),
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), Some("UnderlyingTransaction4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingTransaction4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "IntrBk")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.underlyingtransaction4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceipt_UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06")
    
    override def typeName: Option[String] = Some("UnderlyingTransaction4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.027.001.06"), "IntrBk")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingTransaction4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.underlyingtransaction4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceipt.UnderlyingPaymentTransaction3able]](x, x.namespace, x.key, __scope, false)}).get)
  }


}

