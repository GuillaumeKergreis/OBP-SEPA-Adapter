// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.paymentReturn

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.paymentReturn.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.paymentReturn.Foo](obj, "foo", sepa.sct.generated.paymentReturn.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedpaymentReturn_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable] = new DefaultSepasctgeneratedpaymentReturn_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.AccountIdentification4Choice] = new DefaultSepasctgeneratedpaymentReturn_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.AccountSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReturn_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable] = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount] = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable] = new DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount] = new DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able] = new DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4] = new DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_CashAccount16ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CashAccount16able] = new DefaultSepasctgeneratedpaymentReturn_CashAccount16ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_CashAccount16Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CashAccount16] = new DefaultSepasctgeneratedpaymentReturn_CashAccount16Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice] = new DefaultSepasctgeneratedpaymentReturn_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ChargeBearerType1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargeBearerType1Code] = new DefaultSepasctgeneratedpaymentReturn_ChargeBearerType1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ChargesInformation5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargesInformation5able] = new DefaultSepasctgeneratedpaymentReturn_ChargesInformation5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ChargesInformation5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargesInformation5] = new DefaultSepasctgeneratedpaymentReturn_ChargesInformation5Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedpaymentReturn_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2] = new DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedpaymentReturn_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceType2] = new DefaultSepasctgeneratedpaymentReturn_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_DateAndPlaceOfBirthFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth] = new DefaultSepasctgeneratedpaymentReturn_DateAndPlaceOfBirthFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Documentable] = new DefaultSepasctgeneratedpaymentReturn_DocumentableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Document] = new DefaultSepasctgeneratedpaymentReturn_DocumentFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.DocumentType3Code] = new DefaultSepasctgeneratedpaymentReturn_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able] = new DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7] = new DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GenericAccountIdentification1] = new DefaultSepasctgeneratedpaymentReturn_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedpaymentReturn_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GenericPersonIdentification1] = new DefaultSepasctgeneratedpaymentReturn_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_GroupHeader38ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GroupHeader38able] = new DefaultSepasctgeneratedpaymentReturn_GroupHeader38ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_GroupHeader38Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GroupHeader38] = new DefaultSepasctgeneratedpaymentReturn_GroupHeader38Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.LocalInstrument2Choice] = new DefaultSepasctgeneratedpaymentReturn_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OrganisationIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentification4able] = new DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OrganisationIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentification4] = new DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReturn_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation21ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation21Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation21] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation3ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation3] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalTransactionReference13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able] = new DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalTransactionReference13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalTransactionReference13] = new DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_Party6ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Party6Choicable] = new DefaultSepasctgeneratedpaymentReturn_Party6ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_Party6ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Party6Choice] = new DefaultSepasctgeneratedpaymentReturn_Party6ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PartyIdentification32ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32able] = new DefaultSepasctgeneratedpaymentReturn_PartyIdentification32ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PartyIdentification32Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32] = new DefaultSepasctgeneratedpaymentReturn_PartyIdentification32Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentReturnV02ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentReturnV02able] = new DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentReturnV02Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentReturnV02] = new DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTransactionInformation27ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able] = new DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTransactionInformation27Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27] = new DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTypeInformation22ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able] = new DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTypeInformation22Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTypeInformation22] = new DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PersonIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PersonIdentification5able] = new DefaultSepasctgeneratedpaymentReturn_PersonIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PersonIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PersonIdentification5] = new DefaultSepasctgeneratedpaymentReturn_PersonIdentification5Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReturn_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PostalAddress6able] = new DefaultSepasctgeneratedpaymentReturn_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PostalAddress6] = new DefaultSepasctgeneratedpaymentReturn_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_RemittanceInformation5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.RemittanceInformation5able] = new DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_RemittanceInformation5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.RemittanceInformation5] = new DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReason5ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReason5Choicable] = new DefaultSepasctgeneratedpaymentReturn_ReturnReason5ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReason5ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReason5Choice] = new DefaultSepasctgeneratedpaymentReturn_ReturnReason5ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReasonInformation9ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able] = new DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReasonInformation9Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReasonInformation9] = new DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_ServiceLevel8ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable] = new DefaultSepasctgeneratedpaymentReturn_ServiceLevel8ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ServiceLevel8Choice] = new DefaultSepasctgeneratedpaymentReturn_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_SettlementInformation13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementInformation13able] = new DefaultSepasctgeneratedpaymentReturn_SettlementInformation13ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_SettlementInformation13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementInformation13] = new DefaultSepasctgeneratedpaymentReturn_SettlementInformation13Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementMethod1Code] = new DefaultSepasctgeneratedpaymentReturn_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_StructuredRemittanceInformation7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able] = new DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReturn_StructuredRemittanceInformation7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7] = new DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7Format {}
  implicit lazy val SepasctgeneratedpaymentReturn_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedpaymentReturn_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ActiveCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ActiveCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildSepasctgeneratedpaymentReturn_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReturn_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EUR")) => sepa.sct.generated.paymentReturn.EURValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ActiveOrHistoricCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReturn_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EUR")) => sepa.sct.generated.paymentReturn.EUR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4(scalaxb.fromXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReturn_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2(scalaxb.fromXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReturn_CashAccount16ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CashAccount16able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.CashAccount16able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.CashAccount16able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.CashAccount16 => scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_CashAccount16Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CashAccount16] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CashAccount16")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CashAccount16] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.CashAccount16(scalaxb.fromXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CashAccount16, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReturn_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReturn_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  def buildSepasctgeneratedpaymentReturn_ChargeBearerType1CodeFormat = new DefaultSepasctgeneratedpaymentReturn_ChargeBearerType1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReturn_ChargeBearerType1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargeBearerType1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.ChargeBearerType1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SLEV")) => sepa.sct.generated.paymentReturn.SLEV

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ChargeBearerType1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ChargeBearerType1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_ChargesInformation5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ChargesInformation5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ChargesInformation5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ChargesInformation5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargesInformation5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ChargesInformation5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ChargesInformation5 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargesInformation5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_ChargesInformation5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ChargesInformation5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ChargesInformation5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ChargesInformation5] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Pty")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.ChargesInformation5(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ChargesInformation5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](__obj.Pty, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Pty"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ChargesInformation5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Pty")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ChargesInformation5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](__obj.Pty, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Pty"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReturn.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceType1Choice](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_DateAndPlaceOfBirthFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.Document => scalaxb.toXML[sepa.sct.generated.paymentReturn.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PmtRtr")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.Document(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentReturnV02able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentReturnV02able](__obj.PmtRtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PmtRtr"), __scope, false))
  }

  def buildSepasctgeneratedpaymentReturn_DocumentType3CodeFormat = new DefaultSepasctgeneratedpaymentReturn_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReturn_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.paymentReturn.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PmtRtr")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentReturnV02able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentReturnV02able](__obj.PmtRtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PmtRtr"), __scope, false))
  }

  def buildSepasctgeneratedpaymentReturn_ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReturn_ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReturn_ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FOCR")) => sepa.sct.generated.paymentReturn.FOCR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ExternalReturnReason1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSepasctgeneratedpaymentReturn_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReturn_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReturn_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SEPA")) => sepa.sct.generated.paymentReturn.SEPA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7 => scalaxb.toXML[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReturn_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReturn_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReturn.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_GroupHeader38ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.GroupHeader38able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.GroupHeader38able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("GroupHeader38_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.GroupHeader38](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.GroupHeader38able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.GroupHeader38 => scalaxb.toXML[sepa.sct.generated.paymentReturn.GroupHeader38](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_GroupHeader38Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.GroupHeader38] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("GroupHeader38")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.GroupHeader38] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CreDtTm")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "NbOfTxs")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "TtlRtrdIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IntrBkSttlmDt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      sepa.sct.generated.paymentReturn.GroupHeader38(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.GroupHeader38, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CreDtTm"), __scope, false),
        scalaxb.toXML[String](__obj.NbOfTxs, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("NbOfTxs"), __scope, false),
        __obj.TtlRtrdIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("TtlRtrdIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](__obj.SttlmInf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmInf"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("GroupHeader38_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CreDtTm")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "NbOfTxs")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "TtlRtrdIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IntrBkSttlmDt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.GroupHeader38_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CreDtTm"), __scope, false),
        scalaxb.toXML[String](__obj.NbOfTxs, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("NbOfTxs"), __scope, false),
        __obj.TtlRtrdIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("TtlRtrdIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](__obj.SttlmInf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmInf"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OrganisationIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.OrganisationIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.OrganisationIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.OrganisationIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OrganisationIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OrganisationIdentification4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OrganisationIdentification4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OrganisationIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.OriginalGroupInformation21able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OriginalGroupInformation21_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation21able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.OriginalGroupInformation21 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalGroupInformation21] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation21")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalGroupInformation21] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OriginalGroupInformation21(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation21, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation21_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation21_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.OriginalGroupInformation3able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OriginalGroupInformation3_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation3able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.OriginalGroupInformation3 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalGroupInformation3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalGroupInformation3] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OriginalGroupInformation3(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation3_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.OriginalTransactionReference13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.OriginalTransactionReference13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.OriginalTransactionReference13 => scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalTransactionReference13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalTransactionReference13] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      sepa.sct.generated.paymentReturn.OriginalTransactionReference13(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalTransactionReference13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_Party6ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.Party6Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.Party6Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.Party6Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.Party6Choice => scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReturn_Party6ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.Party6Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("Party6Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.Party6Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.Party6Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.Party6Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReturn.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReturn.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReturn.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_PartyIdentification32ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PartyIdentification32able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PartyIdentification32able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PartyIdentification32able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PartyIdentification32 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReturn_PartyIdentification32Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PartyIdentification32] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PartyIdentification32] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PartyIdentification32(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PartyIdentification32, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReturn.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentReturnV02able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PaymentReturnV02able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PaymentReturnV02_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentReturnV02](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PaymentReturnV02able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PaymentReturnV02 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentReturnV02](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentReturnV02] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentReturnV02")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentReturnV02] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "GrpHdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlGrpInf")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "TxInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PaymentReturnV02(scalaxb.fromXML[sepa.sct.generated.paymentReturn.GroupHeader38able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentReturnV02, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.GroupHeader38able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("GrpHdr"), __scope, false),
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.TxInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("TxInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentReturnV02_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "GrpHdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlGrpInf")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "TxInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.GroupHeader38able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentReturnV02_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.GroupHeader38able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("GrpHdr"), __scope, false),
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.TxInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("TxInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PaymentTransactionInformation27_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PaymentTransactionInformation27able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PaymentTransactionInformation27 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation27")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlIntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrdIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrdInstdAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ChrgBr")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ChrgsInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstdAgt")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      sepa.sct.generated.paymentReturn.PaymentTransactionInformation27(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargeBearerType1Code](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargesInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentTransactionInformation27, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RtrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](__obj.RtrdIntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrdIntrBkSttlmAmt"), __scope, false),
        __obj.RtrdInstdAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrdInstdAmt"), __scope, false) } getOrElse {Nil},
        __obj.ChrgBr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargeBearerType1Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ChrgBr"), __scope, false) } getOrElse {Nil},
        __obj.ChrgsInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargesInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ChrgsInf"), __scope, false) },
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.RtrRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrRsnInf"), __scope, false) },
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation27_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlIntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrdIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrdInstdAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ChrgBr")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ChrgsInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "InstdAgt")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "RtrRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargeBearerType1Code](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ChargesInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentTransactionInformation27_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RtrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalGroupInformation3able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveCurrencyAndAmountable](__obj.RtrdIntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrdIntrBkSttlmAmt"), __scope, false),
        __obj.RtrdInstdAmt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrdInstdAmt"), __scope, false) } getOrElse {Nil},
        __obj.ChrgBr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargeBearerType1Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ChrgBr"), __scope, false) } getOrElse {Nil},
        __obj.ChrgsInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.ChargesInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ChrgsInf"), __scope, false) },
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReturn.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.RtrRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RtrRsnInf"), __scope, false) },
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentReturn.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PaymentTypeInformation22able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PaymentTypeInformation22able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PaymentTypeInformation22able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PaymentTypeInformation22 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PaymentTypeInformation22](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentTypeInformation22] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentTypeInformation22] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PaymentTypeInformation22(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentTypeInformation22, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentReturn.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentReturn.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_PersonIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PersonIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PersonIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PersonIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PersonIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PersonIdentification5 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PersonIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_PersonIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PersonIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PersonIdentification5] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.PersonIdentification5(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PersonIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentReturn.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.paymentReturn.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.RemittanceInformation5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.RemittanceInformation5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.RemittanceInformation5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.RemittanceInformation5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.RemittanceInformation5 => scalaxb.toXML[sepa.sct.generated.paymentReturn.RemittanceInformation5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.RemittanceInformation5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("RemittanceInformation5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.RemittanceInformation5] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.RemittanceInformation5(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.RemittanceInformation5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_ReturnReason5ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReason5Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ReturnReason5Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ReturnReason5Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReason5Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ReturnReason5Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ReturnReason5Choice => scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReason5Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_ReturnReason5ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ReturnReason5Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ReturnReason5Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ReturnReason5Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.ReturnReason5Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ReturnReason5Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.returnreason5choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ReturnReason5Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ReturnReason5Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.returnreason5choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ReturnReasonInformation9able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ReturnReasonInformation9able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ReturnReasonInformation9_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ReturnReasonInformation9able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ReturnReasonInformation9 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReasonInformation9](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ReturnReasonInformation9] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ReturnReasonInformation9")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ReturnReasonInformation9] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Rsn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "AddtlInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.ReturnReasonInformation9(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReason5Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ReturnReasonInformation9, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReason5Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Rsn"), __scope, false) } getOrElse {Nil},
        __obj.AddtlInf flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("AddtlInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ReturnReasonInformation9_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Rsn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "AddtlInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ReturnReason5Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ReturnReasonInformation9_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentReturn.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ReturnReason5Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("Rsn"), __scope, false) } getOrElse {Nil},
        __obj.AddtlInf flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("AddtlInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReturn_ServiceLevel8ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.ServiceLevel8Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.ServiceLevel8Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.ServiceLevel8Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.ServiceLevel8Choice => scalaxb.toXML[sepa.sct.generated.paymentReturn.ServiceLevel8Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReturn_SettlementInformation13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementInformation13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.SettlementInformation13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SettlementInformation13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementInformation13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.SettlementInformation13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.SettlementInformation13 => scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementInformation13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_SettlementInformation13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.SettlementInformation13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("SettlementInformation13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.SettlementInformation13] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.SettlementInformation13(scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.SettlementInformation13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReturn_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("SettlementInformation13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReturn.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReturn.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.paymentReturn.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedpaymentReturn_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedpaymentReturn_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReturn_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReturn.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.paymentReturn.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.paymentReturn.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.paymentReturn.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7 => scalaxb.toXML[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReturn_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReturn.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentReturn.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }


}

