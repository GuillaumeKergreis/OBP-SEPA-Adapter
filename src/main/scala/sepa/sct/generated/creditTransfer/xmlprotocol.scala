// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.creditTransfer

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.creditTransfer.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.creditTransfer.Foo](obj, "foo", sepa.sct.generated.creditTransfer.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedcreditTransfer_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable] = new DefaultSepasctgeneratedcreditTransfer_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.AccountIdentification4Choice] = new DefaultSepasctgeneratedcreditTransfer_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.AccountSchemeName1Choice] = new DefaultSepasctgeneratedcreditTransfer_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable] = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount] = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able] = new DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4] = new DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CashAccount16ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CashAccount16able] = new DefaultSepasctgeneratedcreditTransfer_CashAccount16ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CashAccount16Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CashAccount16] = new DefaultSepasctgeneratedcreditTransfer_CashAccount16Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice] = new DefaultSepasctgeneratedcreditTransfer_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ChargeBearerType1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ChargeBearerType1Code] = new DefaultSepasctgeneratedcreditTransfer_ChargeBearerType1CodeFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedcreditTransfer_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType1ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType2able] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType2] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able] = new DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11] = new DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_DateAndPlaceOfBirthFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth] = new DefaultSepasctgeneratedcreditTransfer_DateAndPlaceOfBirthFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Documentable] = new DefaultSepasctgeneratedcreditTransfer_DocumentableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Document] = new DefaultSepasctgeneratedcreditTransfer_DocumentFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.DocumentType3Code] = new DefaultSepasctgeneratedcreditTransfer_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able] = new DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7] = new DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able] = new DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02] = new DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GenericAccountIdentification1] = new DefaultSepasctgeneratedcreditTransfer_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedcreditTransfer_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GenericPersonIdentification1] = new DefaultSepasctgeneratedcreditTransfer_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_GroupHeader33ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GroupHeader33able] = new DefaultSepasctgeneratedcreditTransfer_GroupHeader33ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_GroupHeader33Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GroupHeader33] = new DefaultSepasctgeneratedcreditTransfer_GroupHeader33Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_LocalInstrument2ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable] = new DefaultSepasctgeneratedcreditTransfer_LocalInstrument2ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.LocalInstrument2Choice] = new DefaultSepasctgeneratedcreditTransfer_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_OrganisationIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.OrganisationIdentification4able] = new DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_OrganisationIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.OrganisationIdentification4] = new DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedcreditTransfer_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Party6ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Party6Choicable] = new DefaultSepasctgeneratedcreditTransfer_Party6ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Party6ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Party6Choice] = new DefaultSepasctgeneratedcreditTransfer_Party6ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32able] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] = new DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentIdentification3ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentIdentification3able] = new DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentIdentification3Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentIdentification3] = new DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentTypeInformation21ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able] = new DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentTypeInformation21Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentTypeInformation21] = new DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PersonIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PersonIdentification5able] = new DefaultSepasctgeneratedcreditTransfer_PersonIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PersonIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PersonIdentification5] = new DefaultSepasctgeneratedcreditTransfer_PersonIdentification5Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedcreditTransfer_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PostalAddress6able] = new DefaultSepasctgeneratedcreditTransfer_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PostalAddress6] = new DefaultSepasctgeneratedcreditTransfer_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_Purpose2ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Purpose2Choicable] = new DefaultSepasctgeneratedcreditTransfer_Purpose2ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Purpose2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Purpose2Choice] = new DefaultSepasctgeneratedcreditTransfer_Purpose2ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_RemittanceInformation5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.RemittanceInformation5able] = new DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_RemittanceInformation5Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.RemittanceInformation5] = new DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_ServiceLevel8ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable] = new DefaultSepasctgeneratedcreditTransfer_ServiceLevel8ChoicableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ServiceLevel8Choice] = new DefaultSepasctgeneratedcreditTransfer_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_SettlementInformation13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementInformation13able] = new DefaultSepasctgeneratedcreditTransfer_SettlementInformation13ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_SettlementInformation13Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementInformation13] = new DefaultSepasctgeneratedcreditTransfer_SettlementInformation13Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementMethod1Code] = new DefaultSepasctgeneratedcreditTransfer_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_StructuredRemittanceInformation7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able] = new DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7ableFormat {}
  implicit lazy val SepasctgeneratedcreditTransfer_StructuredRemittanceInformation7Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7] = new DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7Format {}
  implicit lazy val SepasctgeneratedcreditTransfer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedcreditTransfer_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ActiveCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ActiveCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] with scalaxb.CanWriteChildNodes[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildSepasctgeneratedcreditTransfer_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedcreditTransfer_ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.creditTransfer.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EUR")) => sepa.sct.generated.creditTransfer.EUR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.ActiveCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4 => scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedcreditTransfer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedcreditTransfer_CashAccount16ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CashAccount16able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.CashAccount16able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.CashAccount16able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.CashAccount16 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_CashAccount16Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CashAccount16] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CashAccount16")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CashAccount16] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.CashAccount16(scalaxb.fromXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CashAccount16, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedcreditTransfer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedcreditTransfer_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  def buildSepasctgeneratedcreditTransfer_ChargeBearerType1CodeFormat = new DefaultSepasctgeneratedcreditTransfer_ChargeBearerType1CodeFormat {}
  trait DefaultSepasctgeneratedcreditTransfer_ChargeBearerType1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ChargeBearerType1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.creditTransfer.ChargeBearerType1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SLEV")) => sepa.sct.generated.creditTransfer.SLEV

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ChargeBearerType1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.ChargeBearerType1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedcreditTransfer_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreditorReferenceType1Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.creditTransfer.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType1Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.creditTransfer.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditorReferenceType2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.CreditorReferenceType2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreditorReferenceType2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.CreditorReferenceType2 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditorReferenceType2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceType1Choicable](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreditTransferTransactionInformation11_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11 => scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditTransferTransactionInformation11")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtTpInf")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "ChrgBr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstdAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "UltmtDbtr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DbtrAcct")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DbtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Purp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "RmtInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentIdentification3able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.ChargeBearerType1Code](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Purpose2Choicable](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentIdentification3able](__obj.PmtId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtId"), __scope, false),
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](__obj.IntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("IntrBkSttlmAmt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.ChargeBearerType1Code](__obj.ChrgBr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ChrgBr"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](__obj.Dbtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Dbtr"), __scope, false),
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](__obj.DbtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DbtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](__obj.CdtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](__obj.Cdtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Cdtr"), __scope, false),
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Purpose2Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Purp"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("RmtInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("CreditTransferTransactionInformation11_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtTpInf")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IntrBkSttlmAmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "ChrgBr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstdAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "UltmtDbtr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DbtrAcct")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DbtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Purp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "RmtInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentIdentification3able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.ChargeBearerType1Code](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Purpose2Choicable](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentIdentification3able](__obj.PmtId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtId"), __scope, false),
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](__obj.IntrBkSttlmAmt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("IntrBkSttlmAmt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.ChargeBearerType1Code](__obj.ChrgBr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ChrgBr"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](__obj.Dbtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Dbtr"), __scope, false),
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](__obj.DbtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DbtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](__obj.CdtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](__obj.Cdtr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Cdtr"), __scope, false),
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Purpose2Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Purp"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("RmtInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_DateAndPlaceOfBirthFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedcreditTransfer_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.Document => scalaxb.toXML[sepa.sct.generated.creditTransfer.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "FIToFICstmrCdtTrf")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Document(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able](__obj.FIToFICstmrCdtTrf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FIToFICstmrCdtTrf"), __scope, false))
  }

  def buildSepasctgeneratedcreditTransfer_DocumentType3CodeFormat = new DefaultSepasctgeneratedcreditTransfer_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedcreditTransfer_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.creditTransfer.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.creditTransfer.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedcreditTransfer_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "FIToFICstmrCdtTrf")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able](__obj.FIToFICstmrCdtTrf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FIToFICstmrCdtTrf"), __scope, false))
  }

  def buildSepasctgeneratedcreditTransfer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedcreditTransfer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedcreditTransfer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.creditTransfer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SEPA")) => sepa.sct.generated.creditTransfer.SEPA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7 => scalaxb.toXML[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedcreditTransfer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("FIToFICustomerCreditTransferV02_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02 => scalaxb.toXML[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("FIToFICustomerCreditTransferV02")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "GrpHdr")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtTrfTxInf")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02(scalaxb.fromXML[sepa.sct.generated.creditTransfer.GroupHeader33able](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.GroupHeader33able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("GrpHdr"), __scope, false),
        __obj.CdtTrfTxInf flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtTrfTxInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("FIToFICustomerCreditTransferV02_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "GrpHdr")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtTrfTxInf")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.GroupHeader33able](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.FIToFICustomerCreditTransferV02_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.GroupHeader33able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("GrpHdr"), __scope, false),
        __obj.CdtTrfTxInf flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditTransferTransactionInformation11able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtTrfTxInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.creditTransfer.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_GroupHeader33ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.GroupHeader33able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.GroupHeader33able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("GroupHeader33_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.GroupHeader33](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.GroupHeader33able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.GroupHeader33 => scalaxb.toXML[sepa.sct.generated.creditTransfer.GroupHeader33](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_GroupHeader33Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.GroupHeader33] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("GroupHeader33")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.GroupHeader33] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CreDtTm")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "NbOfTxs")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "TtlIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IntrBkSttlmDt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      sepa.sct.generated.creditTransfer.GroupHeader33(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementInformation13able](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.GroupHeader33, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreDtTm"), __scope, false),
        scalaxb.toXML[String](__obj.NbOfTxs, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("NbOfTxs"), __scope, false),
        __obj.TtlIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("TtlIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementInformation13able](__obj.SttlmInf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmInf"), __scope, false),
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("GroupHeader33_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CreDtTm")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "NbOfTxs")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "TtlIntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "IntrBkSttlmDt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementInformation13able](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.GroupHeader33_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CreDtTm"), __scope, false),
        scalaxb.toXML[String](__obj.NbOfTxs, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("NbOfTxs"), __scope, false),
        __obj.TtlIntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ActiveCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("TtlIntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementInformation13able](__obj.SttlmInf, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmInf"), __scope, false),
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.creditTransfer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_LocalInstrument2ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.LocalInstrument2Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("LocalInstrument2Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.LocalInstrument2Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.LocalInstrument2Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.LocalInstrument2Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.OrganisationIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.OrganisationIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.OrganisationIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.OrganisationIdentification4 => scalaxb.toXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.OrganisationIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.OrganisationIdentification4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.OrganisationIdentification4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.OrganisationIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_Party6ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Party6Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.Party6Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.Party6Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.Party6Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_Party6ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Party6Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Party6Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Party6Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Party6Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Party6Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.creditTransfer.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.creditTransfer.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.creditTransfer.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PartyIdentification32able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.PartyIdentification32able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_4")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PartyIdentification32](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PartyIdentification32 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PartyIdentification32](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PartyIdentification32] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PartyIdentification32] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PartyIdentification32(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.creditTransfer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentIdentification3able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.PaymentIdentification3able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PaymentIdentification3_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentIdentification3](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.PaymentIdentification3able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PaymentIdentification3 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentIdentification3](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PaymentIdentification3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PaymentIdentification3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PaymentIdentification3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstrId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "EndToEndId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "TxId")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PaymentIdentification3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PaymentIdentification3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.InstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstrId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.EndToEndId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("EndToEndId"), __scope, false),
        scalaxb.toXML[String](__obj.TxId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("TxId"), __scope, false))

  }

  trait DefaultSepasctgeneratedcreditTransfer_PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PaymentIdentification3_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "InstrId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "EndToEndId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "TxId")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PaymentIdentification3_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.InstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("InstrId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.EndToEndId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("EndToEndId"), __scope, false),
        scalaxb.toXML[String](__obj.TxId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("TxId"), __scope, false))

  }

  trait DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PaymentTypeInformation21able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.PaymentTypeInformation21able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PaymentTypeInformation21_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.PaymentTypeInformation21able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PaymentTypeInformation21 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PaymentTypeInformation21](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PaymentTypeInformation21] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation21")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PaymentTypeInformation21] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PaymentTypeInformation21(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PaymentTypeInformation21, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation21_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PaymentTypeInformation21_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.creditTransfer.LocalInstrument2Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_PersonIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PersonIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.PersonIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PersonIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.PersonIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PersonIdentification5 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PersonIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_PersonIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PersonIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PersonIdentification5] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.PersonIdentification5(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PersonIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.creditTransfer.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.creditTransfer.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_Purpose2ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.Purpose2Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.Purpose2Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Purpose2Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.Purpose2Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.Purpose2Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.Purpose2Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.Purpose2Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_Purpose2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Purpose2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Purpose2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Purpose2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Purpose2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Purpose2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.purpose2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("Purpose2Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.Purpose2Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.purpose2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.RemittanceInformation5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.RemittanceInformation5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.RemittanceInformation5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.RemittanceInformation5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.RemittanceInformation5 => scalaxb.toXML[sepa.sct.generated.creditTransfer.RemittanceInformation5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.RemittanceInformation5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("RemittanceInformation5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.RemittanceInformation5] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.RemittanceInformation5(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.RemittanceInformation5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedcreditTransfer_ServiceLevel8ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.ServiceLevel8Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.ServiceLevel8Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.ServiceLevel8Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.ServiceLevel8Choice => scalaxb.toXML[sepa.sct.generated.creditTransfer.ServiceLevel8Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedcreditTransfer_SettlementInformation13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementInformation13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.SettlementInformation13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SettlementInformation13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementInformation13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.SettlementInformation13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.SettlementInformation13 => scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementInformation13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_SettlementInformation13Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.SettlementInformation13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("SettlementInformation13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.SettlementInformation13] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.SettlementInformation13(scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.SettlementInformation13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedcreditTransfer_SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("SettlementInformation13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.creditTransfer.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.SettlementInformation13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.creditTransfer.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.creditTransfer.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedcreditTransfer_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedcreditTransfer_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedcreditTransfer_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.creditTransfer.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.creditTransfer.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.creditTransfer.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.creditTransfer.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7 => scalaxb.toXML[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedcreditTransfer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.creditTransfer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.creditTransfer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }


}

