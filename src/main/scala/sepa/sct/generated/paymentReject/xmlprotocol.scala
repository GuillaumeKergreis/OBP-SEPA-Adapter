// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.paymentReject

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.paymentReject.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.paymentReject.Foo](obj, "foo", sepa.sct.generated.paymentReject.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedpaymentReject_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.AccountIdentification4Choicable] = new DefaultSepasctgeneratedpaymentReject_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.AccountIdentification4Choice] = new DefaultSepasctgeneratedpaymentReject_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.AccountSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReject_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable] = new DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount] = new DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able] = new DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4] = new DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_CashAccount16ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CashAccount16able] = new DefaultSepasctgeneratedpaymentReject_CashAccount16ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_CashAccount16Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CashAccount16] = new DefaultSepasctgeneratedpaymentReject_CashAccount16Format {}
  implicit lazy val SepasctgeneratedpaymentReject_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CategoryPurpose1Choice] = new DefaultSepasctgeneratedpaymentReject_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedpaymentReject_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceInformation2] = new DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedpaymentReject_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceType2] = new DefaultSepasctgeneratedpaymentReject_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_DateAndPlaceOfBirthFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth] = new DefaultSepasctgeneratedpaymentReject_DateAndPlaceOfBirthFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Documentable] = new DefaultSepasctgeneratedpaymentReject_DocumentableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Document] = new DefaultSepasctgeneratedpaymentReject_DocumentFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.DocumentType3Code] = new DefaultSepasctgeneratedpaymentReject_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_FinancialInstitutionIdentification7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able] = new DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_FinancialInstitutionIdentification7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7] = new DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7Format {}
  implicit lazy val SepasctgeneratedpaymentReject_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able] = new DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03] = new DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03Format {}
  implicit lazy val SepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GenericAccountIdentification1] = new DefaultSepasctgeneratedpaymentReject_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReject_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedpaymentReject_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReject_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GenericPersonIdentification1] = new DefaultSepasctgeneratedpaymentReject_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentReject_GroupHeader37ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GroupHeader37able] = new DefaultSepasctgeneratedpaymentReject_GroupHeader37ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_GroupHeader37Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GroupHeader37] = new DefaultSepasctgeneratedpaymentReject_GroupHeader37Format {}
  implicit lazy val SepasctgeneratedpaymentReject_GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.LocalInstrument2Choice] = new DefaultSepasctgeneratedpaymentReject_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_OrganisationIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentification4able] = new DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_OrganisationIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentification4] = new DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReject_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalGroupInformation20ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalGroupInformation20able] = new DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalGroupInformation20Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalGroupInformation20] = new DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalTransactionReference13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalTransactionReference13able] = new DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalTransactionReference13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalTransactionReference13] = new DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13Format {}
  implicit lazy val SepasctgeneratedpaymentReject_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_Party6ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Party6Choicable] = new DefaultSepasctgeneratedpaymentReject_Party6ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_Party6ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Party6Choice] = new DefaultSepasctgeneratedpaymentReject_Party6ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PartyIdentification32ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32able] = new DefaultSepasctgeneratedpaymentReject_PartyIdentification32ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PartyIdentification32Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32] = new DefaultSepasctgeneratedpaymentReject_PartyIdentification32Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTransactionInformation26ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able] = new DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTransactionInformation26Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTransactionInformation26] = new DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTypeInformation22ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTypeInformation22able] = new DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTypeInformation22Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTypeInformation22] = new DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PersonIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PersonIdentification5able] = new DefaultSepasctgeneratedpaymentReject_PersonIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PersonIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PersonIdentification5] = new DefaultSepasctgeneratedpaymentReject_PersonIdentification5Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentReject_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PostalAddress6able] = new DefaultSepasctgeneratedpaymentReject_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PostalAddress6] = new DefaultSepasctgeneratedpaymentReject_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedpaymentReject_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_RemittanceInformation5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.RemittanceInformation5able] = new DefaultSepasctgeneratedpaymentReject_RemittanceInformation5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_RemittanceInformation5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.RemittanceInformation5] = new DefaultSepasctgeneratedpaymentReject_RemittanceInformation5Format {}
  implicit lazy val SepasctgeneratedpaymentReject_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_ServiceLevel8ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ServiceLevel8Choicable] = new DefaultSepasctgeneratedpaymentReject_ServiceLevel8ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ServiceLevel8Choice] = new DefaultSepasctgeneratedpaymentReject_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_SettlementInformation13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.SettlementInformation13] = new DefaultSepasctgeneratedpaymentReject_SettlementInformation13Format {}
  implicit lazy val SepasctgeneratedpaymentReject_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.SettlementMethod1Code] = new DefaultSepasctgeneratedpaymentReject_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReason6ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReason6Choicable] = new DefaultSepasctgeneratedpaymentReject_StatusReason6ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReason6ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReason6Choice] = new DefaultSepasctgeneratedpaymentReject_StatusReason6ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReasonInformation8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReasonInformation8able] = new DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReasonInformation8Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReasonInformation8] = new DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8Format {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentReject_StructuredRemittanceInformation7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able] = new DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_StructuredRemittanceInformation7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7] = new DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7Format {}
  implicit lazy val SepasctgeneratedpaymentReject_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentReject_TransactionGroupStatus3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code] = new DefaultSepasctgeneratedpaymentReject_TransactionGroupStatus3CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentReject_TransactionIndividualStatus3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code] = new DefaultSepasctgeneratedpaymentReject_TransactionIndividualStatus3CodeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedpaymentReject_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.paymentReject.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("ActiveOrHistoricCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReject_ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EUR")) => sepa.sct.generated.paymentReject.EUR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyCode_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4(scalaxb.fromXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReject_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReject_CashAccount16ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CashAccount16able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.CashAccount16able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.CashAccount16able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.CashAccount16 => scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_CashAccount16Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CashAccount16] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CashAccount16")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CashAccount16] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.CashAccount16(scalaxb.fromXML[sepa.sct.generated.paymentReject.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CashAccount16, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReject_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReject.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentReject_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReject.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceType1Choice](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceType1Choice](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_DateAndPlaceOfBirthFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReject.DateAndPlaceOfBirth(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.DateAndPlaceOfBirth, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentReject_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.Document => scalaxb.toXML[sepa.sct.generated.paymentReject.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "FIToFIPmtStsRpt")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.Document(scalaxb.fromXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able](__obj.FIToFIPmtStsRpt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FIToFIPmtStsRpt"), __scope, false))
  }

  def buildSepasctgeneratedpaymentReject_DocumentType3CodeFormat = new DefaultSepasctgeneratedpaymentReject_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReject_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.paymentReject.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReject_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "FIToFIPmtStsRpt")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able](__obj.FIToFIPmtStsRpt, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FIToFIPmtStsRpt"), __scope, false))
  }

  def buildSepasctgeneratedpaymentReject_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentReject_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentReject_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SEPA")) => sepa.sct.generated.paymentReject.SEPA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7 => scalaxb.toXML[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReject_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("FIToFIPaymentStatusReportV03_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03 => scalaxb.toXML[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("FIToFIPaymentStatusReportV03")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "GrpHdr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlGrpInfAndSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "TxInfAndSts")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03(scalaxb.fromXML[sepa.sct.generated.paymentReject.GroupHeader37able](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20able](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReject.GroupHeader37able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("GrpHdr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20able](__obj.OrgnlGrpInfAndSts, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlGrpInfAndSts"), __scope, false),
        __obj.TxInfAndSts flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("TxInfAndSts"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("FIToFIPaymentStatusReportV03_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "GrpHdr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlGrpInfAndSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "TxInfAndSts")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentReject.GroupHeader37able](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20able](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.FIToFIPaymentStatusReportV03_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReject.GroupHeader37able](__obj.GrpHdr, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("GrpHdr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20able](__obj.OrgnlGrpInfAndSts, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlGrpInfAndSts"), __scope, false),
        __obj.TxInfAndSts flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("TxInfAndSts"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReject.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_GroupHeader37ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.GroupHeader37able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.GroupHeader37able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("GroupHeader37_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.GroupHeader37](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.GroupHeader37able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.GroupHeader37 => scalaxb.toXML[sepa.sct.generated.paymentReject.GroupHeader37](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_GroupHeader37Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.GroupHeader37] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("GroupHeader37")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.GroupHeader37] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CreDtTm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReject.GroupHeader37(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.GroupHeader37, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CreDtTm"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("GroupHeader37_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "MsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CreDtTm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstdAgt")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.GroupHeader37_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("MsgId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CreDtTm"), __scope, false),
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstdAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OrganisationIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.OrganisationIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.OrganisationIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.OrganisationIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentReject.OrganisationIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OrganisationIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OrganisationIdentification4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.OrganisationIdentification4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OrganisationIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalGroupInformation20able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.OriginalGroupInformation20able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OriginalGroupInformation20_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.OriginalGroupInformation20able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.OriginalGroupInformation20 => scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalGroupInformation20](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OriginalGroupInformation20] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation20")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OriginalGroupInformation20] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlMsgNmId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "GrpSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsRsnInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReject.OriginalGroupInformation20(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OriginalGroupInformation20, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlMsgNmId"), __scope, false),
        __obj.GrpSts map { scalaxb.toXML[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("GrpSts"), __scope, false) } getOrElse {Nil},
        __obj.StsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsRsnInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation20_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlMsgNmId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "GrpSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsRsnInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OriginalGroupInformation20_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlMsgNmId"), __scope, false),
        __obj.GrpSts map { scalaxb.toXML[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("GrpSts"), __scope, false) } getOrElse {Nil},
        __obj.StsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsRsnInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.OriginalTransactionReference13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.OriginalTransactionReference13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.OriginalTransactionReference13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.OriginalTransactionReference13 => scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OriginalTransactionReference13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OriginalTransactionReference13] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      sepa.sct.generated.paymentReject.OriginalTransactionReference13(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.SettlementInformation13](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OriginalTransactionReference13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.SettlementInformation13](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.SettlementInformation13](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentReject.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.SettlementInformation13](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_Party6ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.Party6Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.Party6Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.Party6Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.Party6Choice => scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReject_Party6ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.Party6Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.Party6Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.Party6Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.Party6Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReject.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReject.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentReject.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_PartyIdentification32ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PartyIdentification32able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.PartyIdentification32able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.PartyIdentification32able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PartyIdentification32 => scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReject_PartyIdentification32Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PartyIdentification32] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PartyIdentification32] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PartyIdentification32(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PartyIdentification32, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentReject.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTransactionInformation26able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.PaymentTransactionInformation26able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PaymentTransactionInformation26_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.PaymentTransactionInformation26able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PaymentTransactionInformation26 => scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTransactionInformation26](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PaymentTransactionInformation26] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation26")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PaymentTransactionInformation26] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "TxSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstdAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      sepa.sct.generated.paymentReject.PaymentTransactionInformation26(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PaymentTransactionInformation26, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.StsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.TxSts map { scalaxb.toXML[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("TxSts"), __scope, false) } getOrElse {Nil},
        __obj.StsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsRsnInf"), __scope, false) },
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation26_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "TxSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "StsRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstgAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "InstdAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PaymentTransactionInformation26_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.StsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.TxSts map { scalaxb.toXML[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("TxSts"), __scope, false) } getOrElse {Nil},
        __obj.StsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StsRsnInf"), __scope, false) },
        __obj.InstgAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstgAgt"), __scope, false) } getOrElse {Nil},
        __obj.InstdAgt map { scalaxb.toXML[sepa.sct.generated.paymentReject.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("InstdAgt"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentReject.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PaymentTypeInformation22able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.PaymentTypeInformation22able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.PaymentTypeInformation22able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PaymentTypeInformation22 => scalaxb.toXML[sepa.sct.generated.paymentReject.PaymentTypeInformation22](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PaymentTypeInformation22] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PaymentTypeInformation22] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PaymentTypeInformation22(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PaymentTypeInformation22, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentReject.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentReject.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentReject.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentReject.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentReject.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentReject.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_PersonIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PersonIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.PersonIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PersonIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.PersonIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PersonIdentification5 => scalaxb.toXML[sepa.sct.generated.paymentReject.PersonIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_PersonIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PersonIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PersonIdentification5] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.PersonIdentification5(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PersonIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentReject.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.paymentReject.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_RemittanceInformation5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.RemittanceInformation5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.RemittanceInformation5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.RemittanceInformation5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.RemittanceInformation5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.RemittanceInformation5 => scalaxb.toXML[sepa.sct.generated.paymentReject.RemittanceInformation5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_RemittanceInformation5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.RemittanceInformation5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("RemittanceInformation5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.RemittanceInformation5] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.RemittanceInformation5(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.RemittanceInformation5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentReject_ServiceLevel8ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.ServiceLevel8Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.ServiceLevel8Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.ServiceLevel8Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.ServiceLevel8Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.ServiceLevel8Choice => scalaxb.toXML[sepa.sct.generated.paymentReject.ServiceLevel8Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_SettlementInformation13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.SettlementInformation13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("SettlementInformation13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.SettlementInformation13] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentReject.SettlementInformation13(scalaxb.fromXML[sepa.sct.generated.paymentReject.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.SettlementInformation13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentReject.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.paymentReject.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.paymentReject.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedpaymentReject_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedpaymentReject_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReject_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.paymentReject.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.paymentReject.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.paymentReject.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentReject_StatusReason6ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReason6Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.StatusReason6Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StatusReason6Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReason6Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.StatusReason6Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.StatusReason6Choice => scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReason6Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_StatusReason6ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StatusReason6Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StatusReason6Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StatusReason6Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.StatusReason6Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StatusReason6Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.statusreason6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StatusReason6Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StatusReason6Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.statusreason6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StatusReasonInformation8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.StatusReasonInformation8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StatusReasonInformation8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StatusReasonInformation8_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReasonInformation8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.StatusReasonInformation8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.StatusReasonInformation8 => scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReasonInformation8](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StatusReasonInformation8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StatusReasonInformation8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StatusReasonInformation8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Rsn")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.StatusReasonInformation8(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StatusReasonInformation8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Rsn"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StatusReasonInformation8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Rsn")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Rsn"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StatusReasonInformation8_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "Rsn")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StatusReasonInformation8_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentReject.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentReject.StatusReason6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("Rsn"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.StructuredRemittanceInformation7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentReject.StructuredRemittanceInformation7 => scalaxb.toXML[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.StructuredRemittanceInformation7(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StructuredRemittanceInformation7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentReject_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentReject.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentReject.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  def buildSepasctgeneratedpaymentReject_TransactionGroupStatus3CodeFormat = new DefaultSepasctgeneratedpaymentReject_TransactionGroupStatus3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReject_TransactionGroupStatus3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.TransactionGroupStatus3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.TransactionGroupStatus3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PART")) => sepa.sct.generated.paymentReject.PART
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RJCT")) => sepa.sct.generated.paymentReject.RJCTValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.TransactionGroupStatus3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.TransactionGroupStatus3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildSepasctgeneratedpaymentReject_TransactionIndividualStatus3CodeFormat = new DefaultSepasctgeneratedpaymentReject_TransactionIndividualStatus3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentReject_TransactionIndividualStatus3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RJCT")) => sepa.sct.generated.paymentReject.RJCT

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentReject.TransactionIndividualStatus3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

}

