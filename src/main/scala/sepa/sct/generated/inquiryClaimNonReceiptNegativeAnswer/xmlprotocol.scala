// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Foo](obj, "foo", sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.08",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.08",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceiptRejectReason1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceiptRejectReason1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Documentable] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08Format {}
  implicit lazy val SepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Case4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Case4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Case4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CaseAssignment4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ClaimNonReceipt1Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ClaimNonReceipt1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Rjctd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.claimnonreceipt1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ClaimNonReceipt1Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Rjctd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.claimnonreceipt1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ClaimNonReceiptRejectReason1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ClaimNonReceiptRejectReason1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceiptRejectReason1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.claimnonreceiptrejectreason1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  def buildSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RJNR")) => sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.RJNR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("InvestigationStatus4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("InvestigationStatus4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("InvestigationStatus4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OriginalGroupInformation29_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation29")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation29_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PaymentTransaction90_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTransaction90")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModStsId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ModStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModStsId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able](__obj.OrgnlGrpInf, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlGrpInf"), __scope, false),
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTransaction90_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModStsId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ModStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModStsId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalGroupInformation29able](__obj.OrgnlGrpInf, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlGrpInf"), __scope, false),
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ResolutionOfInvestigationV08_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08 => scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV08")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RslvdCase")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Sts")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModDtls")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ClmNonRctDtls")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnmt"), __scope, false),
        __obj.RslvdCase map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RslvdCase"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Sts"), __scope, false),
        __obj.ModDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModDtls"), __scope, false) } getOrElse {Nil},
        __obj.ClmNonRctDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ClmNonRctDtls"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimNonReceiptNegativeAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV08_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RslvdCase")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Sts")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModDtls")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ClmNonRctDtls")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnmt"), __scope, false),
        __obj.RslvdCase map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RslvdCase"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.InvestigationStatus4Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Sts"), __scope, false),
        __obj.ModDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.PaymentTransaction90able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModDtls"), __scope, false) } getOrElse {Nil},
        __obj.ClmNonRctDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimNonReceiptNegativeAnswer.ClaimNonReceipt1Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ClmNonRctDtls"), __scope, false) } getOrElse {Nil})

  }


}

