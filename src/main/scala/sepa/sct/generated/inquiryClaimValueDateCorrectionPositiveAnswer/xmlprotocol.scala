// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Foo](obj, "foo", sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.08",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.08",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CompensationReason1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CompensationReason1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DateAndPlaceOfBirth1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DateAndPlaceOfBirth1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Documentable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoicableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Purpose2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Purpose2ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementInstruction4Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementInstruction4Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15ableFormat: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15ableFormat {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15Format {}
  implicit lazy val SepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ActiveCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ActiveOrHistoricCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification5_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Case4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Case4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Case4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Case4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cretr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Cretr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cretr"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CaseAssignment4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CaseAssignment4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CashAccount24_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CashAccount24")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CashAccount24_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CashAccount24_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Charges2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Charges2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.Agt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Agt"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Charges2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Charges2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.Agt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Agt"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Compensation1_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Compensation1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Rsn")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.DbtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.CdtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice](__obj.Rsn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Rsn"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Compensation1_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Compensation1_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Amt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Rsn")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveCurrencyAndAmountable](__obj.Amt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Amt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.DbtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](__obj.CdtrAgt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice](__obj.Rsn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Rsn"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CompensationReason1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CompensationReason1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CompensationReason1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.compensationreason1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceType1Choice](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DateAndPlaceOfBirth1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  def buildSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentType3CodeFormat = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DISP")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DISP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FXDR")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FXDR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PUOR")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PUOR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RADM")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RADM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RPIN")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RPIN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  def buildSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ACVA")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ACVA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ExternalInvestigationExecutionConfirmation1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil},
        __obj.Othr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil},
        __obj.Othr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil},
        __obj.Othr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification8_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "BICFI")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.FinancialInstitutionIdentification8_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICFI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("BICFI"), __scope, false) } getOrElse {Nil},
        __obj.Othr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("GenericFinancialIdentification1_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("GenericFinancialIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("GenericFinancialIdentification1_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericFinancialIdentification1_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("InvestigationStatus4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("InvestigationStatus4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("InvestigationStatus4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrganisationIdentification8_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OrganisationIdentification8")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "AnyBIC")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AnyBIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("AnyBIC"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OrganisationIdentification8_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "AnyBIC")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AnyBIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("AnyBIC"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OriginalGroupInformation29_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation29")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation29_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Purp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Purp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference27_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "UltmtCdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Purp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil},
        __obj.Purp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Purp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party34Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party34Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party34choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party34Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party34Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OrganisationIdentification8able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party34choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_4")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Party35Choice_EPC115-06_SCT_IB_2019_V1.0_4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.BranchAndFinancialInstitutionIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35Choice_EPC115u4506_SCT_IB_2019_V1u460_4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party35choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party35ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PartyIdentification125_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PartyIdentification125_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Party34Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PaymentTransaction90_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTransaction90")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModStsId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ModStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModStsId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able](__obj.OrgnlGrpInf, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlGrpInf"), __scope, false),
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTransaction90_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModStsId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ModStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModStsId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalGroupInformation29able](__obj.OrgnlGrpInf, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlGrpInf"), __scope, false),
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.OriginalTransactionReference27able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PaymentTypeInformation25_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation25")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation25_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTypeInformation25_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PersonIdentification13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PersonIdentification13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PersonIdentification13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentification13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.DateAndPlaceOfBirth1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_Purpose2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("Purpose2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Purpose2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.purpose2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("RemittanceInformation15")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("RemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.RemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ResolutionInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Compstn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Chrgs")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.Compstn map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Compstn"), __scope, false) } getOrElse {Nil},
        __obj.Chrgs flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Chrgs"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Compstn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Chrgs")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.Compstn map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Compensation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Compstn"), __scope, false) } getOrElse {Nil},
        __obj.Chrgs flatMap { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Charges2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Chrgs"), __scope, false) })

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ResolutionOfInvestigationV08_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV08")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RslvdCase")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Sts")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModDtls")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnRltdInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnmt"), __scope, false),
        __obj.RslvdCase map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RslvdCase"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Sts"), __scope, false),
        __obj.ModDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModDtls"), __scope, false) } getOrElse {Nil},
        __obj.RsltnRltdInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnRltdInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV08_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Assgnmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RslvdCase")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Sts")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ModDtls")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "RsltnRltdInf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionOfInvestigationV08_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CaseAssignment4able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Assgnmt"), __scope, false),
        __obj.RslvdCase map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.Case4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RslvdCase"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.InvestigationStatus4Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("Sts"), __scope, false),
        __obj.ModDtls map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.PaymentTransaction90able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ModDtls"), __scope, false) } getOrElse {Nil},
        __obj.RsltnRltdInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ResolutionInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("RsltnRltdInf"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementInstruction4Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("SettlementInstruction4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementInstruction4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CashAccount24able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("COVE")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.COVE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("StructuredRemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15 => scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation15")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedinquiryClaimValueDateCorrectionPositiveAnswer_StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation15_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.StructuredRemittanceInformation15_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.inquiryClaimValueDateCorrectionPositiveAnswer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.08"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }


}

