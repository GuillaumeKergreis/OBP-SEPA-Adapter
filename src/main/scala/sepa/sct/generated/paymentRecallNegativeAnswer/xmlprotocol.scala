// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package sepa.sct.generated.paymentRecallNegativeAnswer

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Foo](node)
val document = scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Foo](obj, "foo", sepa.sct.generated.paymentRecallNegativeAnswer.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.03",
    Some("tns") -> "urn:iso:std:iso:20022:tech:xsd:camt.029.001.03",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_AccountSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationIndividualStatus1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationIndividualStatus1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CategoryPurpose1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CategoryPurpose1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ClearingSystemIdentification3ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ClearingSystemIdentification3ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_DateAndPlaceOfBirthFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DateAndPlaceOfBirthFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_DocumentableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Documentable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_DocumentFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Document] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_DocumentType3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentType3CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_GenericAccountIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericAccountIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_GenericOrganisationIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericOrganisationIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_GenericPersonIdentification1Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericPersonIdentification1Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_InvestigationExecutionConfirmation3CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationExecutionConfirmation3CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_LocalInstrument2ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_LocalInstrument2ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_Party7Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentCancellationRejection1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentCancellationRejection1Code] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentCancellationRejection1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentificationSchemeName1ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentificationSchemeName1ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoicableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoicableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoiceFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoiceFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_SettlementInformation13Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_SettlementInformation13Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_SettlementMethod1CodeFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_SettlementMethod1CodeFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3ableFormat: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3ableFormat {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3Format {}
  implicit lazy val SepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format: scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460] = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Document"), Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](elem)))

      case _ => None
    }

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("AccountIdentification4Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IBAN")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountidentification4choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_AccountSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("AccountSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.accountschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("ActiveOrHistoricCurrencyAndAmount_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmountFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] with scalaxb.CanWriteChildNodes[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case node: scala.xml.Node => Right(sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[BigDecimal](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Ccy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Ccy" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Ccy", _) => attr = scala.xml.Attribute(null, "Ccy", __obj.Ccy.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmount_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("FinInstnId"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("BranchAndFinancialInstitutionIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "FinInstnId")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able](__obj.FinInstnId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("FinInstnId"), __scope, false))
  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_CancellationIndividualStatus1CodeFormat = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationIndividualStatus1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationIndividualStatus1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RJCR")) => sepa.sct.generated.paymentRecallNegativeAnswer.RJCRValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CancellationStatusReason1Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CancellationStatusReason1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.cancellationstatusreason1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CancellationStatusReason1Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.cancellationstatusreason1choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CancellationStatusReasonInformation1_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CancellationStatusReasonInformation1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Rsn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "AddtlInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Rsn"), __scope, false) } getOrElse {Nil},
        __obj.AddtlInf flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("AddtlInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CancellationStatusReasonInformation1_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Orgtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Rsn")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "AddtlInf")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Orgtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Orgtr"), __scope, false) } getOrElse {Nil},
        __obj.Rsn map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReason1Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Rsn"), __scope, false) } getOrElse {Nil},
        __obj.AddtlInf flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("AddtlInf"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CaseAssignment2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CaseAssignment2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CaseAssignment2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgnr")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgne")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CreDtTm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](__obj.Assgnr, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgnr"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable](__obj.Assgne, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgne"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.CreDtTm, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CreDtTm"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CashAccount16")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CashAccount16_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CashAccount16_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountIdentification4Choicable](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false))
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CategoryPurpose1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CategoryPurpose1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.categorypurpose1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ClearingSystemIdentification3ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("ClearingSystemIdentification3Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.clearingsystemidentification3choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceInformation2_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Tp")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ref")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tp map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Tp"), __scope, false) } getOrElse {Nil},
        __obj.Ref map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceType1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[DocumentType3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.creditorreferencetype1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_CreditorReferenceType2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("CreditorReferenceType2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdOrPrtry")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Issr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceType1Choice](__obj.CdOrPrtry, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdOrPrtry"), __scope, false),
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DateAndPlaceOfBirthFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("DateAndPlaceOfBirth")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BirthDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PrvcOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CityOfBirth")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CtryOfBirth")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.BirthDt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BirthDt"), __scope, false),
        __obj.PrvcOfBirth map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PrvcOfBirth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CityOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CityOfBirth"), __scope, false),
        scalaxb.toXML[String](__obj.CtryOfBirth, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CtryOfBirth"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Documentable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.Documentable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Document_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Document](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Documentable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Document => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Document](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Document] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Document] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Document(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_DocumentType3CodeFormat = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentType3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_DocumentType3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCOR")) => sepa.sct.generated.paymentRecallNegativeAnswer.SCOR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.DocumentType3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Document_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Document_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "RsltnOfInvstgtn")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Document_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able](__obj.RsltnOfInvstgtn, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("RsltnOfInvstgtn"), __scope, false))
  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SEPA")) => sepa.sct.generated.paymentRecallNegativeAnswer.SEPA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ExternalServiceLevel1Code_EPC115u4506_SCT_IB_2019_V1u460, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("FinancialInstitutionIdentification7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BIC")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.FinancialInstitutionIdentification7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.BIC map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BIC"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericAccountIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("GenericAccountIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.GenericAccountIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.AccountSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericOrganisationIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("GenericOrganisationIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_GenericPersonIdentification1Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("GenericPersonIdentification1")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SchmeNm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Issr")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false),
        __obj.SchmeNm map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SchmeNm"), __scope, false) } getOrElse {Nil},
        __obj.Issr map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Issr"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationExecutionConfirmation3CodeFormat = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationExecutionConfirmation3CodeFormat {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationExecutionConfirmation3CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RJCR")) => sepa.sct.generated.paymentRecallNegativeAnswer.RJCR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("InvestigationStatus2Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("InvestigationStatus2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[InvestigationExecutionConfirmation3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("InvestigationStatus2Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Conf")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[InvestigationExecutionConfirmation3Code](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.investigationstatus2choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationExecutionConfirmation3Code]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_LocalInstrument2ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("LocalInstrument2Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.localinstrument2choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentification4_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "BICOrBEI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BICOrBEI map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("BICOrBEI"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericOrganisationIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OrganisationIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OrganisationIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.organisationidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OriginalGroupInformation3_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OriginalGroupInformation3_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlMsgId")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlMsgNmId")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.OrgnlMsgId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlMsgId"), __scope, false),
        scalaxb.toXML[String](__obj.OrgnlMsgNmId, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlMsgNmId"), __scope, false))

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("OriginalTransactionReference13_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IntrBkSttlmAmt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "IntrBkSttlmDt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SttlmInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PmtTpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "RmtInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "UltmtDbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Dbtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DbtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DbtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrAgt")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cdtr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "UltmtCdtr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IntrBkSttlmAmt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ActiveOrHistoricCurrencyAndAmountable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("IntrBkSttlmAmt"), __scope, false) } getOrElse {Nil},
        __obj.IntrBkSttlmDt map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("IntrBkSttlmDt"), __scope, false) } getOrElse {Nil},
        __obj.SttlmInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SttlmInf"), __scope, false) } getOrElse {Nil},
        __obj.PmtTpInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PmtTpInf"), __scope, false) } getOrElse {Nil},
        __obj.RmtInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("RmtInf"), __scope, false) } getOrElse {Nil},
        __obj.UltmtDbtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("UltmtDbtr"), __scope, false) } getOrElse {Nil},
        __obj.Dbtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Dbtr"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DbtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.DbtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DbtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAgt map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrAgt"), __scope, false) } getOrElse {Nil},
        __obj.Cdtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Cdtr"), __scope, false) } getOrElse {Nil},
        __obj.CdtrAcct map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrAcct"), __scope, false) } getOrElse {Nil},
        __obj.UltmtCdtr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("UltmtCdtr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Party6Choice_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OrganisationIdentification4able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PrvtId")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choice_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party6choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.Party6ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Party7Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Party7Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party7choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.Party7ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_Party7Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("Party7Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Pty")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Agt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.BranchAndFinancialInstitutionIdentification4able](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.Party7Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.party7choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[sepa.sct.generated.paymentRecallNegativeAnswer.Party7ChoicableOption]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_4")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](node, stack))
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_5")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_2")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_4")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PartyIdentification32_EPC115-06_SCT_IB_2019_V1.0_5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Nm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "PstlAdr")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Id")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PartyIdentification32_EPC115u4506_SCT_IB_2019_V1u460_5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nm map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Nm"), __scope, false) } getOrElse {Nil},
        __obj.PstlAdr map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PstlAdr"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.Party6Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_PaymentCancellationRejection1CodeFormat = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentCancellationRejection1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentCancellationRejection1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentCancellationRejection1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.PaymentCancellationRejection1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AGNT")) => sepa.sct.generated.paymentRecallNegativeAnswer.AGNT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CUST")) => sepa.sct.generated.paymentRecallNegativeAnswer.CUST
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LEGL")) => sepa.sct.generated.paymentRecallNegativeAnswer.LEGL

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PaymentCancellationRejection1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentCancellationRejection1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PaymentTransactionInformation33_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation33")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlStsId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "TxCxlSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlStsRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CxlStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlStsId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.TxCxlSts map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("TxCxlSts"), __scope, false) } getOrElse {Nil},
        __obj.CxlStsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlStsRsnInf"), __scope, false) },
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PaymentTransactionInformation33_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlStsId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlGrpInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlInstrId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlEndToEndId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlTxId")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "TxCxlSts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlStsRsnInf")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "OrgnlTxRef")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CxlStsId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlStsId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlGrpInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalGroupInformation3able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlGrpInf"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlInstrId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlInstrId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlEndToEndId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlEndToEndId"), __scope, false) } getOrElse {Nil},
        __obj.OrgnlTxId map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlTxId"), __scope, false) } getOrElse {Nil},
        __obj.TxCxlSts map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationIndividualStatus1Code](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("TxCxlSts"), __scope, false) } getOrElse {Nil},
        __obj.CxlStsRsnInf flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CancellationStatusReasonInformation1able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlStsRsnInf"), __scope, false) },
        __obj.OrgnlTxRef map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.OriginalTransactionReference13able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("OrgnlTxRef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PaymentTypeInformation22_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SvcLvl")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "LclInstrm")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CtgyPurp")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTypeInformation22_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SvcLvl map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SvcLvl"), __scope, false) } getOrElse {Nil},
        __obj.LclInstrm map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.LocalInstrument2Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("LclInstrm"), __scope, false) } getOrElse {Nil},
        __obj.CtgyPurp map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CategoryPurpose1Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CtgyPurp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentification5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentification5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "DtAndPlcOfBirth")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Othr")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentification5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DtAndPlcOfBirth map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.DateAndPlaceOfBirth](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("DtAndPlcOfBirth"), __scope, false) } getOrElse {Nil},
        __obj.Othr flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.GenericPersonIdentification1](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Othr"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PersonIdentificationSchemeName1ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PersonIdentificationSchemeName1Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Prtry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PersonIdentificationSchemeName1Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.personidentificationschemename1choiceoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PostalAddress6")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("PostalAddress6_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ctry")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "AdrLine")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.PostalAddress6_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ctry map { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ctry"), __scope, false) } getOrElse {Nil},
        __obj.AdrLine flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("AdrLine"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("RemittanceInformation5")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("RemittanceInformation5_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Ustrd")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Strd")) ^^
      { case p1 ~ p2 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.RemittanceInformation5_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ustrd flatMap { scalaxb.toXML[String](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Ustrd"), __scope, false) },
        __obj.Strd flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Strd"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("ResolutionOfInvestigationV03_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV03")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgnmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Sts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlDtls")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgnmt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Sts"), __scope, false),
        __obj.CxlDtls flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlDtls"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("ResolutionOfInvestigationV03_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Assgnmt")) ~ 
      (scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Sts")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CxlDtls")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ResolutionOfInvestigationV03_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CaseAssignment2able](__obj.Assgnmt, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Assgnmt"), __scope, false),
        scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.InvestigationStatus2Choicable](__obj.Sts, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("Sts"), __scope, false),
        __obj.CxlDtls flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CxlDtls"), __scope, false) })

  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoicableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choicable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8ChoiceFormat extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("ServiceLevel8Choice_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase((((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "Cd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460(p1) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.ServiceLevel8Choice_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.servicelevel8choicableoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_SettlementInformation13Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("SettlementInformation13")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13] =
      phrase((scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SttlmMtd")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "SttlmAcct")) ~ 
      opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "ClrSys")) ^^
      { case p1 ~ p2 ~ p3 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.SettlementInformation13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code](__obj.SttlmMtd, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SttlmMtd"), __scope, false),
        __obj.SttlmAcct map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CashAccount16able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("SttlmAcct"), __scope, false) } getOrElse {Nil},
        __obj.ClrSys map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.ClearingSystemIdentification3Choice](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("ClrSys"), __scope, false) } getOrElse {Nil})

  }

  def buildSepasctgeneratedpaymentRecallNegativeAnswer_SettlementMethod1CodeFormat = new DefaultSepasctgeneratedpaymentRecallNegativeAnswer_SettlementMethod1CodeFormat {}
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_SettlementMethod1CodeFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLRG")) => sepa.sct.generated.paymentRecallNegativeAnswer.CLRG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INDA")) => sepa.sct.generated.paymentRecallNegativeAnswer.INDA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INGA")) => sepa.sct.generated.paymentRecallNegativeAnswer.INGA

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.SettlementMethod1Code, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("StructuredRemittanceInformation7_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(opt(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "CdtrRefInf")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460(p1.headOption map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.StructuredRemittanceInformation7_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CdtrRefInf map { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.CreditorReferenceInformation2able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("CdtrRefInf"), __scope, false) } getOrElse {Nil})
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3ableFormat extends scalaxb.XMLFormat[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("UnderlyingTransaction3_EPC115-06_SCT_IB_2019_V1.0")) => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460](node, stack))
          case _ => Right(scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460](x, __namespace, __elementLabel, __scope, true)
      case x: sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3 => scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3](x, __namespace, __elementLabel, __scope, false)
    }
  }
  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("UnderlyingTransaction3")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "TxInfAndSts")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3(p1 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TxInfAndSts flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("TxInfAndSts"), __scope, false) })
  }

  trait DefaultSepasctgeneratedpaymentRecallNegativeAnswer_UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460Format extends scalaxb.ElemNameParser[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460] {
    val targetNamespace: Option[String] = Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03")
    
    override def typeName: Option[String] = Some("UnderlyingTransaction3_EPC115-06_SCT_IB_2019_V1.0")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), "TxInfAndSts")) ^^
      { case p1 =>
      sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460(p1 map { scalaxb.fromXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: sepa.sct.generated.paymentRecallNegativeAnswer.UnderlyingTransaction3_EPC115u4506_SCT_IB_2019_V1u460, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TxInfAndSts flatMap { scalaxb.toXML[sepa.sct.generated.paymentRecallNegativeAnswer.PaymentTransactionInformation33able](_, Some("urn:iso:std:iso:20022:tech:xsd:camt.029.001.03"), Some("TxInfAndSts"), __scope, false) })
  }


}

